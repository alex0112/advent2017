#!/usr/bin/env ruby

## http://adventofcode.com/2017/day/1

def naive_special_sum(num)
  num = num.to_s.split('').map {|e| e.to_i}

  sum_list = [0]

  sum_list.push num[0] if num[0] == num[-1]
  num.each do |i1, i2|
    sum_list.push i1 if i1 == 12
  end

  return sum_list.sum
end

def special_sum(num)
  num
    .to_s
    .split('')
    .map {|e| e.to_i}
    .instance_eval {self.push(self[0])}
    .each_cons(2).map {|set| set[0] if set[0] == set[1] }
    .compact
    .sum 
end


## Same thing, but better to read
def special_sum_readable(num)
  nums = num.to_s.split('').map {|e| e.to_i} ## Convert to list of ints
  nums.push(nums[0]) ## Because we can't have circular lists in ruby, set the first element to be last.  Has the same effect.
  to_sum = nums.each_cons(2).map {|set| set[0] if set[0] == set[1] } ## If the two elements we take at a time are equal, add the number to the list of numbers we need to sum
  to_sum.compact ## Get rid of nil values from map
  return to_sum.sum ## Sum them.
end


## Really Crude tests:
def test_special_sum(list)
  compare = {
    1111 => 4,
    91212129 => 9,
    1234 => 0,
  }

  list.each do |num|
    puts num
    result = special_sum(num)
    if result != compare[num]
      puts "#{num} failed:  Expected #{compare[num]}, got #{result}"
    elsif result == compare[num]
      puts "#{num}: passed"
    elsif compare[num] == nil
      puts "Hm.  No test case for #{num}.  Consider adding it to the table."
    end
    p ''
  end
end

test_special_sum([1111, 91212129, 1234])

puts "Answer: "

puts special_sum
